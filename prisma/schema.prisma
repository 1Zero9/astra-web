// This is your Prisma schema file for ASTRA
// Awareness, Security & Threat Response Assistant

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication (future)
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  savedArticles       SavedArticle[]
  generatedContent    GeneratedContent[]
  preferences         UserPreferences?
  readStates          ArticleReadState[]
  readingList         ReadingListItem[]
  notificationPrefs   NotificationPreference?
}

// Saved articles from Pulse
model SavedArticle {
  id          String   @id @default(cuid())
  userId      String
  title       String
  link        String
  source      String
  pubDate     String
  description String?
  category    String   @default("security") // security, ai, tech, f1
  savedAt     DateTime @default(now())
  tags        String[] // For categorization
  notes       String?  // User notes

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([savedAt])
  @@index([category])
}

// Generated content (emails, summaries, etc.)
model GeneratedContent {
  id          String   @id @default(cuid())
  userId      String
  contentType String   // "email", "summary", "briefing", etc.
  title       String
  content     String   @db.Text
  focusArea   String?
  tone        String?
  sourceLinks String[] // Links to source articles
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
  @@index([contentType])
}

// User preferences and settings
model UserPreferences {
  id                    String   @id @default(cuid())
  userId                String   @unique
  defaultContentType    String   @default("Security Awareness Email")
  defaultTone           String   @default("Professional")
  preferredPublications String[] // Preferred news sources
  emailNotifications    Boolean  @default(false)
  updatedAt             DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// RSS Source model
model RSSSource {
  id          String   @id @default(cuid())
  name        String   @unique
  url         String   @unique
  description String?  // Optional description for the RSS source
  category    String   @default("security") // security, ai, tech, f1
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastFetched DateTime? // Last successful fetch timestamp
  fetchErrors Int      @default(0) // Count of consecutive fetch errors
  articleCount Int     @default(0) // Total articles fetched from this source

  @@index([category])
}

// Track which articles a user has read
model ArticleReadState {
  id         String   @id @default(cuid())
  userId     String
  articleLink String  // Unique identifier for the article
  articleTitle String
  isRead     Boolean  @default(true)
  readAt     DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, articleLink])
  @@index([userId])
  @@index([articleLink])
  @@index([readAt])
}

// Reading list / Read later queue
model ReadingListItem {
  id          String   @id @default(cuid())
  userId      String
  title       String
  link        String
  source      String
  pubDate     String
  description String?
  category    String   @default("security") // security, ai, tech, f1
  priority    String   @default("medium") // high, medium, low
  addedAt     DateTime @default(now())
  notes       String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([priority])
  @@index([addedAt])
  @@index([category])
}

// Cached AI summaries for articles (security, ai, tech only - no F1)
model ArticleSummary {
  id          String   @id @default(cuid())
  articleLink String   @unique
  title       String
  category    String   @default("security") // security, ai, tech (NOT f1)
  summary     String   @db.Text
  eli5        String?  @db.Text // Explain like I'm 5 version
  impact      String?  @db.Text // Business impact analysis
  actions     String?  @db.Text // Recommended actions
  cves        String[] // Extracted CVE numbers (security only)
  iocs        String[] // Indicators of Compromise (security only)
  createdAt   DateTime @default(now())

  @@index([articleLink])
  @@index([createdAt])
  @@index([category])
}

// Notification preferences for critical threats
model NotificationPreference {
  id                String   @id @default(cuid())
  userId            String   @unique
  browserNotifications Boolean @default(false)
  emailNotifications Boolean @default(false)
  emailAddress      String?
  criticalOnly      Boolean  @default(true)
  keywords          String[] // Alert on specific keywords
  excludeKeywords   String[] // Don't alert on these
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Analytics tracking
model ReadingAnalytics {
  id          String   @id @default(cuid())
  userId      String
  date        DateTime @default(now())
  articlesRead Int     @default(0)
  topSources   String[]
  topTopics    String[]
  topSeverity  String?
  timeSpent   Int      @default(0) // Minutes

  @@unique([userId, date])
  @@index([userId, date])
  @@index([date])
}
